{
  "name": "SRVjoy",
  "tagline": "Player/Stage control GUI for the Surveyor (or any Player-based mobile robot) using the QT Framework",
  "body": "### Welcome to SRVjoy: A Player/Stage GUI Console to Control the SRV-1 Educational Robot\r\n\r\n#### Dependencies\r\n\r\n- SRVjoy is a GUI console written with Nokia's [QT](http://www.qt.io), an open-source and cross-platform GUI library.\r\n\r\n- It also depends on the [The Player Project](http://playerstage.sourceforge.net), such as `libplayerc++` header files.\r\n\r\n  - Download the [latest Player files](https://sourceforge.net/projects/playerstage/files/Player/) and install them.\r\n\r\n  - To install Stage follow the [Stage Installation Instructions](https://github.com/rtv/Stage/blob/master/INSTALL.txt).\r\n\r\n#### About\r\n\r\nSince we wanted a GUI (graphical user interface) that would allow a human operator to drive the robot and take snapshot images from the camera as well as to be presented with a live-video feed that can, eventually, be integrated with SLAM capabilities – to be added to the *Stage* simulator in future projects. \r\n\r\n\r\nSRVjoy can also control any other robot that has Player drivers and provides similar interfaces. For now, it only supports position2d and camera interfaces, and can connect to a robot through Player's default port number `6665` being served on the `localhost`. Thus, the operator can drive the robot around (controlling both linear and angular speeds), and take snapshot images from the robot's camera. A video feed – native to the console – has not been implemented, yet playercam can be used externally at the same time SRVjoy is running.\r\n\r\nThe navigation can be done through the console buttons in the GUI shown in the ***screenshot TODO***, or by using some assigned keys in the keyboard (The numeric keypad is the preferred choice at the moment).\r\nThe SRVjoy console operates in the following way:\r\n\r\n– All control buttons have icons that show their moving directions. By pressing a direction button, the robot moves in that direction for as long as the\r\nbutton remains pressed.\r\n\r\n– Speed (linear and angular) can be controlled with the\r\nsliders.\r\n\r\n– The camera button will take a snapshot of the current\r\ncamera view and save it as camera####.jpg in the root folder of the executing program.\r\n\r\n  *NOTE:* There is some delay for snapshots (the obot has to focus first, and then shoot), and sometimes the order of pictures appears shifted.\r\n\r\n– Numkeys also resemble the layout of the console buttons, so they can be use to control the robot in a similar manner.",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}